#pragma once

#include "llvm/Support/CommandLine.h"

#define INSTRUMENTSTAGE_ENUM_PA                 \
        ,                                       \
        Refine,                                 \
        CoreHigh,                               \
        CoreLow

#define INSTRUMENTSTAGE_CL_ENUM_PA              \
        clEnumVal(Onnx, "Profile for onnx ops."),\
        clEnumVal(Refine, "PA profiling for onnx and ops supported by prototype hardware."),\
        clEnumVal(CoreHigh, "PA profiling for hardware device driver runtime"),\
        clEnumVal(CoreLow, "PA profiling for hardware device driver runtime")

#define PROFILEIR_CL_ENUM_PA                    \
        , clEnumVal(Refine, "Profile operations in RefineIR generated by " \
                            "--EmitRefineIR") \
        , clEnumVal(CoreHigh, "Profile operations in RefineIR generated by " \
                          "--EmitCoreHighIR") \
        , clEnumVal(CoreLow, "Profile operations in RefineIR generated by " \
                          "--EmitCoreLowIR") \

namespace onnx_mlir {
typedef enum {
    EmitRefineIR,
    EmitCoreHighIR,
    EmitCoreLowIR,
    EmitPNONE,
}PAEmissionTargetType;

extern llvm::cl::OptionCategory OnnxMlirOptions;
extern llvm::cl::opt<onnx_mlir::PAEmissionTargetType> paEmissionTarget;
extern llvm::cl::list<std::string> execNodesOnCpu;
extern llvm::cl::opt<bool> paEnableRefineToOnnx;
extern llvm::cl::opt<bool> paEnableRefineOpt;
extern llvm::cl::opt<bool> paEnableCoreOpt;
extern llvm::cl::opt<bool> profileRefineIR;
extern llvm::cl::opt<bool> profileCoreIR;

} // namespace onnx_mlir
